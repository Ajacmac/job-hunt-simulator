#+TITLE: Job Hunt Simulator

A very simple job hunt simulator to pair with a talk I'm giving on the same subject.

* Brainstorming
We're going to break down the job hunt into multiple steps and preform a very basic monte carlo simulation to demonstrate the relative value of where to invest your time at improving.

I'm going to start by breaking things down into phases and thinking of the probabilities as independent of each other. This begs the question of why do a simulation at all versus just multiplying through the probabilities? I am thinking of the following
- I want to give people an instinct for how the various values affect thigns. I want it to be interactive and it should feel "real". Reporting the exact same value each time wouldn't do this.
- I want to be able to think about variances and potentially even non-normal distribution types as well
- I'm only starting with independent distributions. I could imagine introducing dependent variables, I just am not yet.

** Stages

- Each company might take X amount of periods to move you onto the next stage. Poisson

*** Applying
- How many jobs a period are you applying to? Poisson distribution
- How likely are you to take a period off? Binomial

*** Selection
- Likelihood this position is not real, has been paused, or no one is monitoring it? Normal
- How many applicants per period will a given job recieve? Poisson distribution
- The resume is a better fit for the role than X% other resumes? Normal
- Amount per period that will be passed through to next stage

*** Screening
- Likelihood to pass the screening step? binomial
- Likelihood the position disappears (position filled, frozen, re-org, ball dropped, etc), binomial

*** Interview 1
- Likelihood to pass the interviewing step? Normal
- Likelihood the position disappears (position filled, frozen, re-org, ball dropped, etc)

*** Interview 2
- Likelihood to pass the interviewing step? Normal
- Likelihood the position disappears (position filled, frozen, re-org, ball dropped, etc)

*** Interview 3
- Likelihood to pass the interviewing step? Normal
- Likelihood the position disappears (position filled, frozen, re-org, ball dropped, etc)

*** Offer
- Likelihood of being selected versus others? binomial
- Likelihood the position disappears (position filled, frozen, re-org, ball dropped, etc)
- Likelihood of taking an offer? binomial

*** AI
#+begin_ai :model gpt-4
[SYS]: You are an expert in statistics, data science, reactjs and programming. Give answers in code when appropriate. Prefer functional programming techniques and generator functions. Assume we are going to be running all code in a web browser with javascript. Feel free to use libraries off of npm.
[ME]: Create a reactjs function component that will allow a user to download a value to a file as json and to load it. The interface should look like this:
```
const SaveParameters = ({parameters, setParameters}) => {
}
```
It should have a button. When it is pressed, `JSON.stringify(parameters)` will be downloaded to the user as a json file. It will also have a file upload. When a json file is selected for it it will do `JSON.parse` of its contents and call `setParametsrs` with the result
[AI]:
Firstly, you need to install `file-saver` in your project for saving files on the client-side.

You can install the package by running:

```bash
npm install file-saver --save 
```

Then, here is the ReactJS component that matches your specifications:

```jsx
import React from 'react';
import { saveAs } from 'file-saver';

const SaveParameters = ({parameters, setParameters}) => {
  // download parameters as a json file
  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(parameters)], {type: "application/json;charset=utf-8"});
    saveAs(blob, 'parameters.json');
  }

  // parse the uploaded json file and update parameters
  const handleUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const jsonObj = JSON.parse(event.target.result);
        setParameters(jsonObj);
      };
      reader.readAsText(file);
    }
  };

  return (
    <div>
      <button onClick={handleDownload}>Download Parameters</button>
      <input type='file' accept='.json' onChange={handleUpload} />
    </div>
  );
}

export default SaveParameters;
```

In this code:

- `handleDownload` creates a Blob from parameters, then triggers a download prompt to save it as a JSON file.
- `handleUpload` reads an uploaded JSON file, then parse it into a JavaScript object and updates parameters by calling `setParameters`.

Make sure your `parameters` prop is a serializable object, and you have the appropriate permissions to read and write files.

[ME]:  pf
#+end_ai
